// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteOrderReader is a Reader for the DeleteOrder structure.
type DeleteOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewDeleteOrderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /store/order/{orderId}] deleteOrder", response, response.Code())
	}
}

// NewDeleteOrderBadRequest creates a DeleteOrderBadRequest with default headers values
func NewDeleteOrderBadRequest() *DeleteOrderBadRequest {
	return &DeleteOrderBadRequest{}
}

/*
DeleteOrderBadRequest describes a response with status code 400, with default header values.

Invalid ID supplied
*/
type DeleteOrderBadRequest struct {
}

// IsSuccess returns true when this delete order bad request response has a 2xx status code
func (o *DeleteOrderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete order bad request response has a 3xx status code
func (o *DeleteOrderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete order bad request response has a 4xx status code
func (o *DeleteOrderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete order bad request response has a 5xx status code
func (o *DeleteOrderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete order bad request response a status code equal to that given
func (o *DeleteOrderBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete order bad request response
func (o *DeleteOrderBadRequest) Code() int {
	return 400
}

func (o *DeleteOrderBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /store/order/{orderId}][%d] deleteOrderBadRequest", 400)
}

func (o *DeleteOrderBadRequest) String() string {
	return fmt.Sprintf("[DELETE /store/order/{orderId}][%d] deleteOrderBadRequest", 400)
}

func (o *DeleteOrderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteOrderNotFound creates a DeleteOrderNotFound with default headers values
func NewDeleteOrderNotFound() *DeleteOrderNotFound {
	return &DeleteOrderNotFound{}
}

/*
DeleteOrderNotFound describes a response with status code 404, with default header values.

Order not found
*/
type DeleteOrderNotFound struct {
}

// IsSuccess returns true when this delete order not found response has a 2xx status code
func (o *DeleteOrderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete order not found response has a 3xx status code
func (o *DeleteOrderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete order not found response has a 4xx status code
func (o *DeleteOrderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete order not found response has a 5xx status code
func (o *DeleteOrderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete order not found response a status code equal to that given
func (o *DeleteOrderNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete order not found response
func (o *DeleteOrderNotFound) Code() int {
	return 404
}

func (o *DeleteOrderNotFound) Error() string {
	return fmt.Sprintf("[DELETE /store/order/{orderId}][%d] deleteOrderNotFound", 404)
}

func (o *DeleteOrderNotFound) String() string {
	return fmt.Sprintf("[DELETE /store/order/{orderId}][%d] deleteOrderNotFound", 404)
}

func (o *DeleteOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

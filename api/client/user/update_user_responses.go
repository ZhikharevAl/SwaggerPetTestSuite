// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateUserReader is a Reader for the UpdateUser structure.
type UpdateUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewUpdateUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /user/{username}] updateUser", response, response.Code())
	}
}

// NewUpdateUserBadRequest creates a UpdateUserBadRequest with default headers values
func NewUpdateUserBadRequest() *UpdateUserBadRequest {
	return &UpdateUserBadRequest{}
}

/*
UpdateUserBadRequest describes a response with status code 400, with default header values.

Invalid user supplied
*/
type UpdateUserBadRequest struct {
}

// IsSuccess returns true when this update user bad request response has a 2xx status code
func (o *UpdateUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user bad request response has a 3xx status code
func (o *UpdateUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user bad request response has a 4xx status code
func (o *UpdateUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user bad request response has a 5xx status code
func (o *UpdateUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update user bad request response a status code equal to that given
func (o *UpdateUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update user bad request response
func (o *UpdateUserBadRequest) Code() int {
	return 400
}

func (o *UpdateUserBadRequest) Error() string {
	return fmt.Sprintf("[PUT /user/{username}][%d] updateUserBadRequest", 400)
}

func (o *UpdateUserBadRequest) String() string {
	return fmt.Sprintf("[PUT /user/{username}][%d] updateUserBadRequest", 400)
}

func (o *UpdateUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserNotFound creates a UpdateUserNotFound with default headers values
func NewUpdateUserNotFound() *UpdateUserNotFound {
	return &UpdateUserNotFound{}
}

/*
UpdateUserNotFound describes a response with status code 404, with default header values.

User not found
*/
type UpdateUserNotFound struct {
}

// IsSuccess returns true when this update user not found response has a 2xx status code
func (o *UpdateUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user not found response has a 3xx status code
func (o *UpdateUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user not found response has a 4xx status code
func (o *UpdateUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user not found response has a 5xx status code
func (o *UpdateUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update user not found response a status code equal to that given
func (o *UpdateUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update user not found response
func (o *UpdateUserNotFound) Code() int {
	return 404
}

func (o *UpdateUserNotFound) Error() string {
	return fmt.Sprintf("[PUT /user/{username}][%d] updateUserNotFound", 404)
}

func (o *UpdateUserNotFound) String() string {
	return fmt.Sprintf("[PUT /user/{username}][%d] updateUserNotFound", 404)
}

func (o *UpdateUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
